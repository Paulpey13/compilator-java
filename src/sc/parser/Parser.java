/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.parser;

import sc.lexer.*;
import sc.node.*;
import sc.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgramme node1 = (PProgramme) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AListDecVariableOptProgramme */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AOuExp */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce AExp1Exp */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AIncrementeInstIncremente */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce ATernaireInstTernaire */
            {
                ArrayList<Object> list = new4();
                push(goTo(3), list, false);
            }
            break;
            case 5: /* reduce AListExpCallFunction */
            {
                ArrayList<Object> list = new5();
                push(goTo(4), list, false);
            }
            break;
            case 6: /* reduce AEpsilonListExp */
            {
                ArrayList<Object> list = new6();
                push(goTo(5), list, false);
            }
            break;
            case 7: /* reduce AListExpressionsListExp */
            {
                ArrayList<Object> list = new7();
                push(goTo(5), list, false);
            }
            break;
            case 8: /* reduce AEpsilonListExp2 */
            {
                ArrayList<Object> list = new8();
                push(goTo(6), list, false);
            }
            break;
            case 9: /* reduce AListExpSeparatorListExp2 */
            {
                ArrayList<Object> list = new9();
                push(goTo(6), list, false);
            }
            break;
            case 10: /* reduce AAffectationInstAffectation */
            {
                ArrayList<Object> list = new10();
                push(goTo(7), list, false);
            }
            break;
            case 11: /* reduce AAffectationTableauInstAffectation */
            {
                ArrayList<Object> list = new11();
                push(goTo(7), list, false);
            }
            break;
            case 12: /* reduce ACallFunctionInstCallFunction */
            {
                ArrayList<Object> list = new12();
                push(goTo(8), list, false);
            }
            break;
            case 13: /* reduce ATantQueInstTantQue */
            {
                ArrayList<Object> list = new13();
                push(goTo(9), list, false);
            }
            break;
            case 14: /* reduce AReturnInstReturn */
            {
                ArrayList<Object> list = new14();
                push(goTo(10), list, false);
            }
            break;
            case 15: /* reduce ASiInstSi */
            {
                ArrayList<Object> list = new15();
                push(goTo(11), list, false);
            }
            break;
            case 16: /* reduce ASinonInstSiSinon */
            {
                ArrayList<Object> list = new16();
                push(goTo(12), list, false);
            }
            break;
            case 17: /* reduce AEpsilonInstSiSinon */
            {
                ArrayList<Object> list = new17();
                push(goTo(12), list, false);
            }
            break;
            case 18: /* reduce AWriteInstWrite */
            {
                ArrayList<Object> list = new18();
                push(goTo(13), list, false);
            }
            break;
            case 19: /* reduce AInstAffectationInstruction */
            {
                ArrayList<Object> list = new19();
                push(goTo(14), list, false);
            }
            break;
            case 20: /* reduce AInstCallFunctionInstruction */
            {
                ArrayList<Object> list = new20();
                push(goTo(14), list, false);
            }
            break;
            case 21: /* reduce AInstTantQueInstruction */
            {
                ArrayList<Object> list = new21();
                push(goTo(14), list, false);
            }
            break;
            case 22: /* reduce AInstReturnInstruction */
            {
                ArrayList<Object> list = new22();
                push(goTo(14), list, false);
            }
            break;
            case 23: /* reduce AInstSiInstruction */
            {
                ArrayList<Object> list = new23();
                push(goTo(14), list, false);
            }
            break;
            case 24: /* reduce AInstWriteInstruction */
            {
                ArrayList<Object> list = new24();
                push(goTo(14), list, false);
            }
            break;
            case 25: /* reduce AListInstructionsInstBloc */
            {
                ArrayList<Object> list = new25();
                push(goTo(15), list, false);
            }
            break;
            case 26: /* reduce AInstructionListListInst */
            {
                ArrayList<Object> list = new26();
                push(goTo(16), list, false);
            }
            break;
            case 27: /* reduce AEpsilonListInst */
            {
                ArrayList<Object> list = new27();
                push(goTo(16), list, false);
            }
            break;
            case 28: /* reduce ATypeDecVariable */
            {
                ArrayList<Object> list = new28();
                push(goTo(17), list, false);
            }
            break;
            case 29: /* reduce ATableauDecVariable */
            {
                ArrayList<Object> list = new29();
                push(goTo(17), list, false);
            }
            break;
            case 30: /* reduce AArrayInstTableau */
            {
                ArrayList<Object> list = new30();
                push(goTo(18), list, false);
            }
            break;
            case 31: /* reduce AEntierType */
            {
                ArrayList<Object> list = new31();
                push(goTo(19), list, false);
            }
            break;
            case 32: /* reduce AListDecVariable2ListDecVariable */
            {
                ArrayList<Object> list = new32();
                push(goTo(20), list, false);
            }
            break;
            case 33: /* reduce AEpsilonListDecVariable */
            {
                ArrayList<Object> list = new33();
                push(goTo(20), list, false);
            }
            break;
            case 34: /* reduce ADecVariableListDecVariable2 */
            {
                ArrayList<Object> list = new34();
                push(goTo(21), list, false);
            }
            break;
            case 35: /* reduce AEpsilonListDecVariable2 */
            {
                ArrayList<Object> list = new35();
                push(goTo(21), list, false);
            }
            break;
            case 36: /* reduce ADecVarListDecVariableOpt */
            {
                ArrayList<Object> list = new36();
                push(goTo(22), list, false);
            }
            break;
            case 37: /* reduce AEpsilonListDecVariableOpt */
            {
                ArrayList<Object> list = new37();
                push(goTo(22), list, false);
            }
            break;
            case 38: /* reduce AList2ListDecVariableOpt2 */
            {
                ArrayList<Object> list = new38();
                push(goTo(23), list, false);
            }
            break;
            case 39: /* reduce AEpsilonListDecVariableOpt2 */
            {
                ArrayList<Object> list = new39();
                push(goTo(23), list, false);
            }
            break;
            case 40: /* reduce AListDecVariableOptDecFunction */
            {
                ArrayList<Object> list = new40();
                push(goTo(24), list, false);
            }
            break;
            case 41: /* reduce ADecFunctionListDecFunction */
            {
                ArrayList<Object> list = new41();
                push(goTo(25), list, false);
            }
            break;
            case 42: /* reduce AEpsilonListDecFunction */
            {
                ArrayList<Object> list = new42();
                push(goTo(25), list, false);
            }
            break;
            case 43: /* reduce AEtExp1 */
            {
                ArrayList<Object> list = new43();
                push(goTo(26), list, false);
            }
            break;
            case 44: /* reduce AExp2Exp1 */
            {
                ArrayList<Object> list = new44();
                push(goTo(26), list, false);
            }
            break;
            case 45: /* reduce AEqualExp2 */
            {
                ArrayList<Object> list = new45();
                push(goTo(27), list, false);
            }
            break;
            case 46: /* reduce AInfExp2 */
            {
                ArrayList<Object> list = new46();
                push(goTo(27), list, false);
            }
            break;
            case 47: /* reduce AExp3Exp2 */
            {
                ArrayList<Object> list = new47();
                push(goTo(27), list, false);
            }
            break;
            case 48: /* reduce APlusExp3 */
            {
                ArrayList<Object> list = new48();
                push(goTo(28), list, false);
            }
            break;
            case 49: /* reduce AMinusExp3 */
            {
                ArrayList<Object> list = new49();
                push(goTo(28), list, false);
            }
            break;
            case 50: /* reduce AExp4Exp3 */
            {
                ArrayList<Object> list = new50();
                push(goTo(28), list, false);
            }
            break;
            case 51: /* reduce AMultiplicationExp4 */
            {
                ArrayList<Object> list = new51();
                push(goTo(29), list, false);
            }
            break;
            case 52: /* reduce ADivExp4 */
            {
                ArrayList<Object> list = new52();
                push(goTo(29), list, false);
            }
            break;
            case 53: /* reduce AExp5Exp4 */
            {
                ArrayList<Object> list = new53();
                push(goTo(29), list, false);
            }
            break;
            case 54: /* reduce ANonExp5 */
            {
                ArrayList<Object> list = new54();
                push(goTo(30), list, false);
            }
            break;
            case 55: /* reduce AExp6Exp5 */
            {
                ArrayList<Object> list = new55();
                push(goTo(30), list, false);
            }
            break;
            case 56: /* reduce AExpExp6 */
            {
                ArrayList<Object> list = new56();
                push(goTo(31), list, false);
            }
            break;
            case 57: /* reduce ANumberExp6 */
            {
                ArrayList<Object> list = new57();
                push(goTo(31), list, false);
            }
            break;
            case 58: /* reduce AIdExp6 */
            {
                ArrayList<Object> list = new58();
                push(goTo(31), list, false);
            }
            break;
            case 59: /* reduce ATableauExp6 */
            {
                ArrayList<Object> list = new59();
                push(goTo(31), list, false);
            }
            break;
            case 60: /* reduce ACallFunctionExp6 */
            {
                ArrayList<Object> list = new60();
                push(goTo(31), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AListDecVariableOptProgramme */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramme pprogrammeNode1;
        {
            // Block
        PListDecVariableOpt plistdecvariableoptNode2;
        PListDecFunction plistdecfunctionNode3;
        plistdecvariableoptNode2 = (PListDecVariableOpt)nodeArrayList1.get(0);
        plistdecfunctionNode3 = (PListDecFunction)nodeArrayList2.get(0);

        pprogrammeNode1 = new AListDecVariableOptProgramme(plistdecvariableoptNode2, plistdecfunctionNode3);
        }
	nodeList.add(pprogrammeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AOuExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TOu touNode3;
        PExp1 pexp1Node4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        touNode3 = (TOu)nodeArrayList2.get(0);
        pexp1Node4 = (PExp1)nodeArrayList3.get(0);

        pexpNode1 = new AOuExp(pexpNode2, touNode3, pexp1Node4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AExp1Exp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp1 pexp1Node2;
        pexp1Node2 = (PExp1)nodeArrayList1.get(0);

        pexpNode1 = new AExp1Exp(pexp1Node2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AIncrementeInstIncremente */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstIncremente pinstincrementeNode1;
        {
            // Block
        PDecVariable pdecvariableNode2;
        TPlusEqual tplusequalNode3;
        PExp pexpNode4;
        pdecvariableNode2 = (PDecVariable)nodeArrayList1.get(0);
        tplusequalNode3 = (TPlusEqual)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pinstincrementeNode1 = new AIncrementeInstIncremente(pdecvariableNode2, tplusequalNode3, pexpNode4);
        }
	nodeList.add(pinstincrementeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ATernaireInstTernaire */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstTernaire pinstternaireNode1;
        {
            // Block
        TCrochetOuv tcrochetouvNode2;
        PExp pexpNode3;
        TCrochetFer tcrochetferNode4;
        TInterrogation tinterrogationNode5;
        PExp pexpNode6;
        PExp pexpNode7;
        tcrochetouvNode2 = (TCrochetOuv)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tcrochetferNode4 = (TCrochetFer)nodeArrayList3.get(0);
        tinterrogationNode5 = (TInterrogation)nodeArrayList4.get(0);
        pexpNode6 = (PExp)nodeArrayList5.get(0);
        pexpNode7 = (PExp)nodeArrayList6.get(0);

        pinstternaireNode1 = new ATernaireInstTernaire(tcrochetouvNode2, pexpNode3, tcrochetferNode4, tinterrogationNode5, pexpNode6, pexpNode7);
        }
	nodeList.add(pinstternaireNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AListExpCallFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCallFunction pcallfunctionNode1;
        {
            // Block
        TId tidNode2;
        TParOuv tparouvNode3;
        PListExp plistexpNode4;
        TParFer tparferNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tparouvNode3 = (TParOuv)nodeArrayList2.get(0);
        plistexpNode4 = (PListExp)nodeArrayList3.get(0);
        tparferNode5 = (TParFer)nodeArrayList4.get(0);

        pcallfunctionNode1 = new AListExpCallFunction(tidNode2, tparouvNode3, plistexpNode4, tparferNode5);
        }
	nodeList.add(pcallfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AEpsilonListExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListExp plistexpNode1;
        {
            // Block

        plistexpNode1 = new AEpsilonListExp();
        }
	nodeList.add(plistexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AListExpressionsListExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListExp plistexpNode1;
        {
            // Block
        PExp pexpNode2;
        PListExp2 plistexp2Node3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        plistexp2Node3 = (PListExp2)nodeArrayList2.get(0);

        plistexpNode1 = new AListExpressionsListExp(pexpNode2, plistexp2Node3);
        }
	nodeList.add(plistexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AEpsilonListExp2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListExp2 plistexp2Node1;
        {
            // Block

        plistexp2Node1 = new AEpsilonListExp2();
        }
	nodeList.add(plistexp2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AListExpSeparatorListExp2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListExp2 plistexp2Node1;
        {
            // Block
        TComma tcommaNode2;
        PExp pexpNode3;
        PListExp2 plistexp2Node4;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        plistexp2Node4 = (PListExp2)nodeArrayList3.get(0);

        plistexp2Node1 = new AListExpSeparatorListExp2(tcommaNode2, pexpNode3, plistexp2Node4);
        }
	nodeList.add(plistexp2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAffectationInstAffectation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstAffectation pinstaffectationNode1;
        {
            // Block
        TId tidNode2;
        TEqual tequalNode3;
        PExp pexpNode4;
        TPointVir tpointvirNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tequalNode3 = (TEqual)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tpointvirNode5 = (TPointVir)nodeArrayList4.get(0);

        pinstaffectationNode1 = new AAffectationInstAffectation(tidNode2, tequalNode3, pexpNode4, tpointvirNode5);
        }
	nodeList.add(pinstaffectationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAffectationTableauInstAffectation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstAffectation pinstaffectationNode1;
        {
            // Block
        PTableau ptableauNode2;
        TEqual tequalNode3;
        PExp pexpNode4;
        TPointVir tpointvirNode5;
        ptableauNode2 = (PTableau)nodeArrayList1.get(0);
        tequalNode3 = (TEqual)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tpointvirNode5 = (TPointVir)nodeArrayList4.get(0);

        pinstaffectationNode1 = new AAffectationTableauInstAffectation(ptableauNode2, tequalNode3, pexpNode4, tpointvirNode5);
        }
	nodeList.add(pinstaffectationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ACallFunctionInstCallFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstCallFunction pinstcallfunctionNode1;
        {
            // Block
        PCallFunction pcallfunctionNode2;
        TPointVir tpointvirNode3;
        pcallfunctionNode2 = (PCallFunction)nodeArrayList1.get(0);
        tpointvirNode3 = (TPointVir)nodeArrayList2.get(0);

        pinstcallfunctionNode1 = new ACallFunctionInstCallFunction(pcallfunctionNode2, tpointvirNode3);
        }
	nodeList.add(pinstcallfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ATantQueInstTantQue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstTantQue pinsttantqueNode1;
        {
            // Block
        TTantQue ttantqueNode2;
        PExp pexpNode3;
        TFaire tfaireNode4;
        PInstBloc pinstblocNode5;
        ttantqueNode2 = (TTantQue)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tfaireNode4 = (TFaire)nodeArrayList3.get(0);
        pinstblocNode5 = (PInstBloc)nodeArrayList4.get(0);

        pinsttantqueNode1 = new ATantQueInstTantQue(ttantqueNode2, pexpNode3, tfaireNode4, pinstblocNode5);
        }
	nodeList.add(pinsttantqueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AReturnInstReturn */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstReturn pinstreturnNode1;
        {
            // Block
        TRetour tretourNode2;
        PExp pexpNode3;
        TPointVir tpointvirNode4;
        tretourNode2 = (TRetour)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tpointvirNode4 = (TPointVir)nodeArrayList3.get(0);

        pinstreturnNode1 = new AReturnInstReturn(tretourNode2, pexpNode3, tpointvirNode4);
        }
	nodeList.add(pinstreturnNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ASiInstSi */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstSi pinstsiNode1;
        {
            // Block
        TSi tsiNode2;
        PExp pexpNode3;
        TAlors talorsNode4;
        PInstBloc pinstblocNode5;
        PInstSiSinon pinstsisinonNode6;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        pinstblocNode5 = (PInstBloc)nodeArrayList4.get(0);
        pinstsisinonNode6 = (PInstSiSinon)nodeArrayList5.get(0);

        pinstsiNode1 = new ASiInstSi(tsiNode2, pexpNode3, talorsNode4, pinstblocNode5, pinstsisinonNode6);
        }
	nodeList.add(pinstsiNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ASinonInstSiSinon */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstSiSinon pinstsisinonNode1;
        {
            // Block
        TSinon tsinonNode2;
        PInstBloc pinstblocNode3;
        tsinonNode2 = (TSinon)nodeArrayList1.get(0);
        pinstblocNode3 = (PInstBloc)nodeArrayList2.get(0);

        pinstsisinonNode1 = new ASinonInstSiSinon(tsinonNode2, pinstblocNode3);
        }
	nodeList.add(pinstsisinonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AEpsilonInstSiSinon */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PInstSiSinon pinstsisinonNode1;
        {
            // Block

        pinstsisinonNode1 = new AEpsilonInstSiSinon();
        }
	nodeList.add(pinstsisinonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AWriteInstWrite */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstWrite pinstwriteNode1;
        {
            // Block
        TEcrire tecrireNode2;
        TParOuv tparouvNode3;
        PExp pexpNode4;
        TParFer tparferNode5;
        TPointVir tpointvirNode6;
        tecrireNode2 = (TEcrire)nodeArrayList1.get(0);
        tparouvNode3 = (TParOuv)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tparferNode5 = (TParFer)nodeArrayList4.get(0);
        tpointvirNode6 = (TPointVir)nodeArrayList5.get(0);

        pinstwriteNode1 = new AWriteInstWrite(tecrireNode2, tparouvNode3, pexpNode4, tparferNode5, tpointvirNode6);
        }
	nodeList.add(pinstwriteNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AInstAffectationInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        PInstAffectation pinstaffectationNode2;
        pinstaffectationNode2 = (PInstAffectation)nodeArrayList1.get(0);

        pinstructionNode1 = new AInstAffectationInstruction(pinstaffectationNode2);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AInstCallFunctionInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        PInstCallFunction pinstcallfunctionNode2;
        pinstcallfunctionNode2 = (PInstCallFunction)nodeArrayList1.get(0);

        pinstructionNode1 = new AInstCallFunctionInstruction(pinstcallfunctionNode2);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AInstTantQueInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        PInstTantQue pinsttantqueNode2;
        pinsttantqueNode2 = (PInstTantQue)nodeArrayList1.get(0);

        pinstructionNode1 = new AInstTantQueInstruction(pinsttantqueNode2);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AInstReturnInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        PInstReturn pinstreturnNode2;
        pinstreturnNode2 = (PInstReturn)nodeArrayList1.get(0);

        pinstructionNode1 = new AInstReturnInstruction(pinstreturnNode2);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AInstSiInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        PInstSi pinstsiNode2;
        pinstsiNode2 = (PInstSi)nodeArrayList1.get(0);

        pinstructionNode1 = new AInstSiInstruction(pinstsiNode2);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AInstWriteInstruction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstruction pinstructionNode1;
        {
            // Block
        PInstWrite pinstwriteNode2;
        pinstwriteNode2 = (PInstWrite)nodeArrayList1.get(0);

        pinstructionNode1 = new AInstWriteInstruction(pinstwriteNode2);
        }
	nodeList.add(pinstructionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AListInstructionsInstBloc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstBloc pinstblocNode1;
        {
            // Block
        TAccOuv taccouvNode2;
        PListInst plistinstNode3;
        TAccFer taccferNode4;
        taccouvNode2 = (TAccOuv)nodeArrayList1.get(0);
        plistinstNode3 = (PListInst)nodeArrayList2.get(0);
        taccferNode4 = (TAccFer)nodeArrayList3.get(0);

        pinstblocNode1 = new AListInstructionsInstBloc(taccouvNode2, plistinstNode3, taccferNode4);
        }
	nodeList.add(pinstblocNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AInstructionListListInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListInst plistinstNode1;
        {
            // Block
        PInstruction pinstructionNode2;
        PListInst plistinstNode3;
        pinstructionNode2 = (PInstruction)nodeArrayList1.get(0);
        plistinstNode3 = (PListInst)nodeArrayList2.get(0);

        plistinstNode1 = new AInstructionListListInst(pinstructionNode2, plistinstNode3);
        }
	nodeList.add(plistinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AEpsilonListInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListInst plistinstNode1;
        {
            // Block

        plistinstNode1 = new AEpsilonListInst();
        }
	nodeList.add(plistinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ATypeDecVariable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecVariable pdecvariableNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pdecvariableNode1 = new ATypeDecVariable(ptypeNode2, tidNode3);
        }
	nodeList.add(pdecvariableNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ATableauDecVariable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecVariable pdecvariableNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        TCrochetOuv tcrochetouvNode4;
        TNumber tnumberNode5;
        TCrochetFer tcrochetferNode6;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tcrochetouvNode4 = (TCrochetOuv)nodeArrayList3.get(0);
        tnumberNode5 = (TNumber)nodeArrayList4.get(0);
        tcrochetferNode6 = (TCrochetFer)nodeArrayList5.get(0);

        pdecvariableNode1 = new ATableauDecVariable(ptypeNode2, tidNode3, tcrochetouvNode4, tnumberNode5, tcrochetferNode6);
        }
	nodeList.add(pdecvariableNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AArrayInstTableau */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTableau ptableauNode1;
        {
            // Block
        TId tidNode2;
        TCrochetOuv tcrochetouvNode3;
        PExp pexpNode4;
        TCrochetFer tcrochetferNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tcrochetouvNode3 = (TCrochetOuv)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tcrochetferNode5 = (TCrochetFer)nodeArrayList4.get(0);

        ptableauNode1 = new AArrayInstTableau(tidNode2, tcrochetouvNode3, pexpNode4, tcrochetferNode5);
        }
	nodeList.add(ptableauNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AEntierType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TEntier tentierNode2;
        tentierNode2 = (TEntier)nodeArrayList1.get(0);

        ptypeNode1 = new AEntierType(tentierNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AListDecVariable2ListDecVariable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListDecVariable plistdecvariableNode1;
        {
            // Block
        PDecVariable pdecvariableNode2;
        PListDecVariable2 plistdecvariable2Node3;
        pdecvariableNode2 = (PDecVariable)nodeArrayList1.get(0);
        plistdecvariable2Node3 = (PListDecVariable2)nodeArrayList2.get(0);

        plistdecvariableNode1 = new AListDecVariable2ListDecVariable(pdecvariableNode2, plistdecvariable2Node3);
        }
	nodeList.add(plistdecvariableNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AEpsilonListDecVariable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListDecVariable plistdecvariableNode1;
        {
            // Block

        plistdecvariableNode1 = new AEpsilonListDecVariable();
        }
	nodeList.add(plistdecvariableNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ADecVariableListDecVariable2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListDecVariable2 plistdecvariable2Node1;
        {
            // Block
        TComma tcommaNode2;
        PDecVariable pdecvariableNode3;
        PListDecVariable2 plistdecvariable2Node4;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pdecvariableNode3 = (PDecVariable)nodeArrayList2.get(0);
        plistdecvariable2Node4 = (PListDecVariable2)nodeArrayList3.get(0);

        plistdecvariable2Node1 = new ADecVariableListDecVariable2(tcommaNode2, pdecvariableNode3, plistdecvariable2Node4);
        }
	nodeList.add(plistdecvariable2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AEpsilonListDecVariable2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListDecVariable2 plistdecvariable2Node1;
        {
            // Block

        plistdecvariable2Node1 = new AEpsilonListDecVariable2();
        }
	nodeList.add(plistdecvariable2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ADecVarListDecVariableOpt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListDecVariableOpt plistdecvariableoptNode1;
        {
            // Block
        PDecVariable pdecvariableNode2;
        PListDecVariableOpt2 plistdecvariableopt2Node3;
        TPointVir tpointvirNode4;
        pdecvariableNode2 = (PDecVariable)nodeArrayList1.get(0);
        plistdecvariableopt2Node3 = (PListDecVariableOpt2)nodeArrayList2.get(0);
        tpointvirNode4 = (TPointVir)nodeArrayList3.get(0);

        plistdecvariableoptNode1 = new ADecVarListDecVariableOpt(pdecvariableNode2, plistdecvariableopt2Node3, tpointvirNode4);
        }
	nodeList.add(plistdecvariableoptNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AEpsilonListDecVariableOpt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListDecVariableOpt plistdecvariableoptNode1;
        {
            // Block

        plistdecvariableoptNode1 = new AEpsilonListDecVariableOpt();
        }
	nodeList.add(plistdecvariableoptNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AList2ListDecVariableOpt2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListDecVariableOpt2 plistdecvariableopt2Node1;
        {
            // Block
        TComma tcommaNode2;
        PDecVariable pdecvariableNode3;
        PListDecVariableOpt2 plistdecvariableopt2Node4;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pdecvariableNode3 = (PDecVariable)nodeArrayList2.get(0);
        plistdecvariableopt2Node4 = (PListDecVariableOpt2)nodeArrayList3.get(0);

        plistdecvariableopt2Node1 = new AList2ListDecVariableOpt2(tcommaNode2, pdecvariableNode3, plistdecvariableopt2Node4);
        }
	nodeList.add(plistdecvariableopt2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AEpsilonListDecVariableOpt2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListDecVariableOpt2 plistdecvariableopt2Node1;
        {
            // Block

        plistdecvariableopt2Node1 = new AEpsilonListDecVariableOpt2();
        }
	nodeList.add(plistdecvariableopt2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AListDecVariableOptDecFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecFunction pdecfunctionNode1;
        {
            // Block
        TId tidNode2;
        TParOuv tparouvNode3;
        PListDecVariable plistdecvariableNode4;
        TParFer tparferNode5;
        PListDecVariableOpt plistdecvariableoptNode6;
        PInstBloc pinstblocNode7;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tparouvNode3 = (TParOuv)nodeArrayList2.get(0);
        plistdecvariableNode4 = (PListDecVariable)nodeArrayList3.get(0);
        tparferNode5 = (TParFer)nodeArrayList4.get(0);
        plistdecvariableoptNode6 = (PListDecVariableOpt)nodeArrayList5.get(0);
        pinstblocNode7 = (PInstBloc)nodeArrayList6.get(0);

        pdecfunctionNode1 = new AListDecVariableOptDecFunction(tidNode2, tparouvNode3, plistdecvariableNode4, tparferNode5, plistdecvariableoptNode6, pinstblocNode7);
        }
	nodeList.add(pdecfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ADecFunctionListDecFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListDecFunction plistdecfunctionNode1;
        {
            // Block
        PDecFunction pdecfunctionNode2;
        PListDecFunction plistdecfunctionNode3;
        pdecfunctionNode2 = (PDecFunction)nodeArrayList1.get(0);
        plistdecfunctionNode3 = (PListDecFunction)nodeArrayList2.get(0);

        plistdecfunctionNode1 = new ADecFunctionListDecFunction(pdecfunctionNode2, plistdecfunctionNode3);
        }
	nodeList.add(plistdecfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AEpsilonListDecFunction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListDecFunction plistdecfunctionNode1;
        {
            // Block

        plistdecfunctionNode1 = new AEpsilonListDecFunction();
        }
	nodeList.add(plistdecfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AEtExp1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp1 pexp1Node1;
        {
            // Block
        PExp1 pexp1Node2;
        TEt tetNode3;
        PExp2 pexp2Node4;
        pexp1Node2 = (PExp1)nodeArrayList1.get(0);
        tetNode3 = (TEt)nodeArrayList2.get(0);
        pexp2Node4 = (PExp2)nodeArrayList3.get(0);

        pexp1Node1 = new AEtExp1(pexp1Node2, tetNode3, pexp2Node4);
        }
	nodeList.add(pexp1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AExp2Exp1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp1 pexp1Node1;
        {
            // Block
        PExp2 pexp2Node2;
        pexp2Node2 = (PExp2)nodeArrayList1.get(0);

        pexp1Node1 = new AExp2Exp1(pexp2Node2);
        }
	nodeList.add(pexp1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AEqualExp2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp2 pexp2Node1;
        {
            // Block
        PExp2 pexp2Node2;
        TEqual tequalNode3;
        PExp3 pexp3Node4;
        pexp2Node2 = (PExp2)nodeArrayList1.get(0);
        tequalNode3 = (TEqual)nodeArrayList2.get(0);
        pexp3Node4 = (PExp3)nodeArrayList3.get(0);

        pexp2Node1 = new AEqualExp2(pexp2Node2, tequalNode3, pexp3Node4);
        }
	nodeList.add(pexp2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AInfExp2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp2 pexp2Node1;
        {
            // Block
        PExp2 pexp2Node2;
        TInf tinfNode3;
        PExp3 pexp3Node4;
        pexp2Node2 = (PExp2)nodeArrayList1.get(0);
        tinfNode3 = (TInf)nodeArrayList2.get(0);
        pexp3Node4 = (PExp3)nodeArrayList3.get(0);

        pexp2Node1 = new AInfExp2(pexp2Node2, tinfNode3, pexp3Node4);
        }
	nodeList.add(pexp2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AExp3Exp2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp2 pexp2Node1;
        {
            // Block
        PExp3 pexp3Node2;
        pexp3Node2 = (PExp3)nodeArrayList1.get(0);

        pexp2Node1 = new AExp3Exp2(pexp3Node2);
        }
	nodeList.add(pexp2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce APlusExp3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp3 pexp3Node1;
        {
            // Block
        PExp3 pexp3Node2;
        TPlus tplusNode3;
        PExp4 pexp4Node4;
        pexp3Node2 = (PExp3)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pexp4Node4 = (PExp4)nodeArrayList3.get(0);

        pexp3Node1 = new APlusExp3(pexp3Node2, tplusNode3, pexp4Node4);
        }
	nodeList.add(pexp3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AMinusExp3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp3 pexp3Node1;
        {
            // Block
        PExp3 pexp3Node2;
        TMinus tminusNode3;
        PExp4 pexp4Node4;
        pexp3Node2 = (PExp3)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pexp4Node4 = (PExp4)nodeArrayList3.get(0);

        pexp3Node1 = new AMinusExp3(pexp3Node2, tminusNode3, pexp4Node4);
        }
	nodeList.add(pexp3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AExp4Exp3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp3 pexp3Node1;
        {
            // Block
        PExp4 pexp4Node2;
        pexp4Node2 = (PExp4)nodeArrayList1.get(0);

        pexp3Node1 = new AExp4Exp3(pexp4Node2);
        }
	nodeList.add(pexp3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AMultiplicationExp4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp4 pexp4Node1;
        {
            // Block
        PExp4 pexp4Node2;
        TMultiply tmultiplyNode3;
        PExp5 pexp5Node4;
        pexp4Node2 = (PExp4)nodeArrayList1.get(0);
        tmultiplyNode3 = (TMultiply)nodeArrayList2.get(0);
        pexp5Node4 = (PExp5)nodeArrayList3.get(0);

        pexp4Node1 = new AMultiplicationExp4(pexp4Node2, tmultiplyNode3, pexp5Node4);
        }
	nodeList.add(pexp4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce ADivExp4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp4 pexp4Node1;
        {
            // Block
        PExp4 pexp4Node2;
        TDiv tdivNode3;
        PExp5 pexp5Node4;
        pexp4Node2 = (PExp4)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        pexp5Node4 = (PExp5)nodeArrayList3.get(0);

        pexp4Node1 = new ADivExp4(pexp4Node2, tdivNode3, pexp5Node4);
        }
	nodeList.add(pexp4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AExp5Exp4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp4 pexp4Node1;
        {
            // Block
        PExp5 pexp5Node2;
        pexp5Node2 = (PExp5)nodeArrayList1.get(0);

        pexp4Node1 = new AExp5Exp4(pexp5Node2);
        }
	nodeList.add(pexp4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ANonExp5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp5 pexp5Node1;
        {
            // Block
        TNon tnonNode2;
        PExp5 pexp5Node3;
        tnonNode2 = (TNon)nodeArrayList1.get(0);
        pexp5Node3 = (PExp5)nodeArrayList2.get(0);

        pexp5Node1 = new ANonExp5(tnonNode2, pexp5Node3);
        }
	nodeList.add(pexp5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AExp6Exp5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp5 pexp5Node1;
        {
            // Block
        PExp6 pexp6Node2;
        pexp6Node2 = (PExp6)nodeArrayList1.get(0);

        pexp5Node1 = new AExp6Exp5(pexp6Node2);
        }
	nodeList.add(pexp5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AExpExp6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp6 pexp6Node1;
        {
            // Block
        TParOuv tparouvNode2;
        PExp pexpNode3;
        TParFer tparferNode4;
        tparouvNode2 = (TParOuv)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tparferNode4 = (TParFer)nodeArrayList3.get(0);

        pexp6Node1 = new AExpExp6(tparouvNode2, pexpNode3, tparferNode4);
        }
	nodeList.add(pexp6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ANumberExp6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp6 pexp6Node1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pexp6Node1 = new ANumberExp6(tnumberNode2);
        }
	nodeList.add(pexp6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AIdExp6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp6 pexp6Node1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pexp6Node1 = new AIdExp6(tidNode2);
        }
	nodeList.add(pexp6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce ATableauExp6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp6 pexp6Node1;
        {
            // Block
        PTableau ptableauNode2;
        ptableauNode2 = (PTableau)nodeArrayList1.get(0);

        pexp6Node1 = new ATableauExp6(ptableauNode2);
        }
	nodeList.add(pexp6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce ACallFunctionExp6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp6 pexp6Node1;
        {
            // Block
        PCallFunction pcallfunctionNode2;
        pcallfunctionNode2 = (PCallFunction)nodeArrayList1.get(0);

        pexp6Node1 = new ACallFunctionExp6(pcallfunctionNode2);
        }
	nodeList.add(pexp6Node1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 37}, {27, SHIFT, 1}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 2}, {29, ACCEPT, -1}, },
			{{-1, REDUCE, 39}, {17, SHIFT, 6}, },
			{{-1, ERROR, 4}, {28, SHIFT, 8}, },
			{{-1, REDUCE, 42}, {28, SHIFT, 9}, },
			{{-1, ERROR, 6}, {27, SHIFT, 1}, },
			{{-1, ERROR, 7}, {18, SHIFT, 13}, },
			{{-1, REDUCE, 28}, {12, SHIFT, 14}, },
			{{-1, ERROR, 9}, {15, SHIFT, 15}, },
			{{-1, REDUCE, 42}, {28, SHIFT, 9}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 39}, {17, SHIFT, 6}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 14}, {0, SHIFT, 18}, },
			{{-1, REDUCE, 33}, {27, SHIFT, 1}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 18}, {13, SHIFT, 21}, },
			{{-1, REDUCE, 35}, {17, SHIFT, 22}, },
			{{-1, ERROR, 20}, {16, SHIFT, 24}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 22}, {27, SHIFT, 1}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 37}, {27, SHIFT, 1}, },
			{{-1, REDUCE, 35}, {17, SHIFT, 22}, },
			{{-1, ERROR, 26}, {10, SHIFT, 28}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 27}, {21, SHIFT, 30}, {22, SHIFT, 31}, {23, SHIFT, 32}, {25, SHIFT, 33}, {28, SHIFT, 34}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 30}, {0, SHIFT, 45}, {9, SHIFT, 46}, {15, SHIFT, 47}, {28, SHIFT, 48}, },
			{{-1, ERROR, 31}, {0, SHIFT, 45}, {9, SHIFT, 46}, {15, SHIFT, 47}, {28, SHIFT, 48}, },
			{{-1, ERROR, 32}, {0, SHIFT, 45}, {9, SHIFT, 46}, {15, SHIFT, 47}, {28, SHIFT, 48}, },
			{{-1, ERROR, 33}, {15, SHIFT, 60}, },
			{{-1, ERROR, 34}, {8, SHIFT, 61}, {12, SHIFT, 62}, {15, SHIFT, 63}, },
			{{-1, ERROR, 35}, {18, SHIFT, 64}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 27}, {21, SHIFT, 30}, {22, SHIFT, 31}, {23, SHIFT, 32}, {25, SHIFT, 33}, {28, SHIFT, 34}, },
			{{-1, ERROR, 43}, {11, SHIFT, 66}, },
			{{-1, ERROR, 44}, {8, SHIFT, 67}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 46}, {0, SHIFT, 45}, {9, SHIFT, 46}, {15, SHIFT, 47}, {28, SHIFT, 48}, },
			{{-1, ERROR, 47}, {0, SHIFT, 45}, {9, SHIFT, 46}, {15, SHIFT, 47}, {28, SHIFT, 48}, },
			{{-1, REDUCE, 58}, {12, SHIFT, 62}, {15, SHIFT, 63}, },
			{{-1, ERROR, 49}, {2, SHIFT, 70}, {20, SHIFT, 71}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 2}, {1, SHIFT, 72}, },
			{{-1, REDUCE, 44}, {4, SHIFT, 73}, {8, SHIFT, 74}, },
			{{-1, REDUCE, 47}, {3, SHIFT, 75}, {5, SHIFT, 76}, },
			{{-1, REDUCE, 50}, {6, SHIFT, 77}, {7, SHIFT, 78}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 58}, {2, SHIFT, 70}, {18, SHIFT, 79}, },
			{{-1, ERROR, 59}, {2, SHIFT, 70}, {24, SHIFT, 80}, },
			{{-1, ERROR, 60}, {0, SHIFT, 45}, {9, SHIFT, 46}, {15, SHIFT, 47}, {28, SHIFT, 48}, },
			{{-1, ERROR, 61}, {0, SHIFT, 45}, {9, SHIFT, 46}, {15, SHIFT, 47}, {28, SHIFT, 48}, },
			{{-1, ERROR, 62}, {0, SHIFT, 45}, {9, SHIFT, 46}, {15, SHIFT, 47}, {28, SHIFT, 48}, },
			{{-1, REDUCE, 6}, {0, SHIFT, 45}, {9, SHIFT, 46}, {15, SHIFT, 47}, {28, SHIFT, 48}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 67}, {0, SHIFT, 45}, {9, SHIFT, 46}, {15, SHIFT, 47}, {28, SHIFT, 48}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 69}, {2, SHIFT, 70}, {16, SHIFT, 87}, },
			{{-1, ERROR, 70}, {0, SHIFT, 45}, {9, SHIFT, 46}, {15, SHIFT, 47}, {28, SHIFT, 48}, },
			{{-1, ERROR, 71}, {10, SHIFT, 28}, },
			{{-1, ERROR, 72}, {0, SHIFT, 45}, {9, SHIFT, 46}, {15, SHIFT, 47}, {28, SHIFT, 48}, },
			{{-1, ERROR, 73}, {0, SHIFT, 45}, {9, SHIFT, 46}, {15, SHIFT, 47}, {28, SHIFT, 48}, },
			{{-1, ERROR, 74}, {0, SHIFT, 45}, {9, SHIFT, 46}, {15, SHIFT, 47}, {28, SHIFT, 48}, },
			{{-1, ERROR, 75}, {0, SHIFT, 45}, {9, SHIFT, 46}, {15, SHIFT, 47}, {28, SHIFT, 48}, },
			{{-1, ERROR, 76}, {0, SHIFT, 45}, {9, SHIFT, 46}, {15, SHIFT, 47}, {28, SHIFT, 48}, },
			{{-1, ERROR, 77}, {0, SHIFT, 45}, {9, SHIFT, 46}, {15, SHIFT, 47}, {28, SHIFT, 48}, },
			{{-1, ERROR, 78}, {0, SHIFT, 45}, {9, SHIFT, 46}, {15, SHIFT, 47}, {28, SHIFT, 48}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 80}, {10, SHIFT, 28}, },
			{{-1, ERROR, 81}, {2, SHIFT, 70}, {16, SHIFT, 98}, },
			{{-1, ERROR, 82}, {2, SHIFT, 70}, {18, SHIFT, 99}, },
			{{-1, ERROR, 83}, {2, SHIFT, 70}, {13, SHIFT, 100}, },
			{{-1, REDUCE, 8}, {2, SHIFT, 70}, {17, SHIFT, 101}, },
			{{-1, ERROR, 85}, {16, SHIFT, 103}, },
			{{-1, ERROR, 86}, {2, SHIFT, 70}, {18, SHIFT, 104}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 1}, {1, SHIFT, 72}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 43}, {4, SHIFT, 73}, {8, SHIFT, 74}, },
			{{-1, REDUCE, 46}, {3, SHIFT, 75}, {5, SHIFT, 76}, },
			{{-1, REDUCE, 45}, {3, SHIFT, 75}, {5, SHIFT, 76}, },
			{{-1, REDUCE, 48}, {6, SHIFT, 77}, {7, SHIFT, 78}, },
			{{-1, REDUCE, 49}, {6, SHIFT, 77}, {7, SHIFT, 78}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 17}, {26, SHIFT, 105}, },
			{{-1, ERROR, 98}, {18, SHIFT, 107}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 101}, {0, SHIFT, 45}, {9, SHIFT, 46}, {15, SHIFT, 47}, {28, SHIFT, 48}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 105}, {10, SHIFT, 28}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 8}, {2, SHIFT, 70}, {17, SHIFT, 101}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 9}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 49}, {31, 58}, {32, 59}, {47, 69}, {60, 81}, {61, 82}, {62, 83}, {63, 84}, {67, 86}, {101, 108}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, 50}, {28, 35}, {42, 35}, },
			{{-1, 85}, },
			{{-1, 102}, {108, 110}, },
			{{-1, 36}, },
			{{-1, 37}, },
			{{-1, 38}, },
			{{-1, 39}, },
			{{-1, 40}, },
			{{-1, 106}, },
			{{-1, 41}, },
			{{-1, 42}, },
			{{-1, 29}, {71, 89}, {80, 97}, {105, 109}, },
			{{-1, 43}, {42, 65}, },
			{{-1, 3}, {6, 12}, {15, 19}, {22, 25}, },
			{{-1, 51}, {28, 44}, {42, 44}, },
			{{-1, 4}, },
			{{-1, 20}, },
			{{-1, 23}, {25, 27}, },
			{{-1, 5}, {24, 26}, },
			{{-1, 7}, {12, 17}, },
			{{-1, 10}, },
			{{-1, 11}, {10, 16}, },
			{{-1, 52}, {70, 88}, },
			{{-1, 53}, {72, 90}, },
			{{-1, 54}, {73, 91}, {74, 92}, },
			{{-1, 55}, {75, 93}, {76, 94}, },
			{{-1, 56}, {46, 68}, {77, 95}, {78, 96}, },
			{{-1, 57}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'entier', id, EOF",
			"expecting: id",
			"expecting: EOF",
			"expecting: ',', ';'",
			"expecting: id, EOF",
			"expecting: 'entier'",
			"expecting: ';'",
			"expecting: '[', ')', ',', ';'",
			"expecting: '('",
			"expecting: '{', id, EOF",
			"expecting: number",
			"expecting: ')', 'entier'",
			"expecting: ']'",
			"expecting: ')', ','",
			"expecting: ')'",
			"expecting: ')', ',', ';'",
			"expecting: '{', 'entier'",
			"expecting: '{'",
			"expecting: '}', 'tantque', 'retour', 'si', 'ecrire', id",
			"expecting: number, '!', '(', id",
			"expecting: '=', '[', '('",
			"expecting: '}'",
			"expecting: '='",
			"expecting: '&', '|', '+', '<', '-', '/', '*', '=', ']', ')', ',', ';', 'faire', 'alors'",
			"expecting: '&', '|', '+', '<', '-', '/', '*', '=', '[', ']', '(', ')', ',', ';', 'faire', 'alors'",
			"expecting: '|', 'faire'",
			"expecting: '&', '|', ']', ')', ',', ';', 'faire', 'alors'",
			"expecting: '&', '|', '<', '=', ']', ')', ',', ';', 'faire', 'alors'",
			"expecting: '&', '|', '+', '<', '-', '=', ']', ')', ',', ';', 'faire', 'alors'",
			"expecting: '|', ';'",
			"expecting: '|', 'alors'",
			"expecting: number, '!', '(', ')', id",
			"expecting: '}', 'tantque', 'retour', 'si', 'ecrire', 'sinon', id, EOF",
			"expecting: '|', ')'",
			"expecting: '|', ']'",
			"expecting: '|', ')', ','",
			"expecting: '}', 'tantque', 'retour', 'si', 'ecrire', 'sinon', id",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 1, 4, 5, 6, 7, 8, 4, 2, 3, 9, 10, 11, 2, 6, 12, 13, 14, 15, 5, 14, 16, 13, 17, 14, 18, 4, 19, 19, 19, 8, 20, 6, 18, 18, 18, 18, 18, 18, 18, 21, 22, 23, 19, 19, 24, 25, 23, 23, 26, 27, 28, 23, 23, 23, 29, 30, 19, 19, 19, 31, 18, 21, 32, 19, 23, 33, 19, 17, 19, 19, 19, 19, 19, 19, 19, 18, 17, 33, 29, 34, 35, 14, 29, 23, 26, 18, 27, 28, 28, 23, 23, 23, 23, 36, 6, 18, 23, 19, 14, 23, 18, 17, 18, 18, 35, 18, 14, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
