/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.analysis;

import java.util.*;
import sc.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgramme().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAListDecVariableOptProgramme(AListDecVariableOptProgramme node)
    {
        defaultIn(node);
    }

    public void outAListDecVariableOptProgramme(AListDecVariableOptProgramme node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListDecVariableOptProgramme(AListDecVariableOptProgramme node)
    {
        inAListDecVariableOptProgramme(node);
        if(node.getListDecVariableOpt() != null)
        {
            node.getListDecVariableOpt().apply(this);
        }
        if(node.getListDecFunction() != null)
        {
            node.getListDecFunction().apply(this);
        }
        outAListDecVariableOptProgramme(node);
    }

    public void inAOuExp(AOuExp node)
    {
        defaultIn(node);
    }

    public void outAOuExp(AOuExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOuExp(AOuExp node)
    {
        inAOuExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        outAOuExp(node);
    }

    public void inAExp1Exp(AExp1Exp node)
    {
        defaultIn(node);
    }

    public void outAExp1Exp(AExp1Exp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp1Exp(AExp1Exp node)
    {
        inAExp1Exp(node);
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        outAExp1Exp(node);
    }

    public void inAIncrementeInstIncremente(AIncrementeInstIncremente node)
    {
        defaultIn(node);
    }

    public void outAIncrementeInstIncremente(AIncrementeInstIncremente node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIncrementeInstIncremente(AIncrementeInstIncremente node)
    {
        inAIncrementeInstIncremente(node);
        if(node.getDecVariable() != null)
        {
            node.getDecVariable().apply(this);
        }
        if(node.getPlusEqual() != null)
        {
            node.getPlusEqual().apply(this);
        }
        if(node.getE2() != null)
        {
            node.getE2().apply(this);
        }
        outAIncrementeInstIncremente(node);
    }

    public void inATernaireInstTernaire(ATernaireInstTernaire node)
    {
        defaultIn(node);
    }

    public void outATernaireInstTernaire(ATernaireInstTernaire node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATernaireInstTernaire(ATernaireInstTernaire node)
    {
        inATernaireInstTernaire(node);
        if(node.getCrochetOuv() != null)
        {
            node.getCrochetOuv().apply(this);
        }
        if(node.getE1() != null)
        {
            node.getE1().apply(this);
        }
        if(node.getCrochetFer() != null)
        {
            node.getCrochetFer().apply(this);
        }
        if(node.getInterrogation() != null)
        {
            node.getInterrogation().apply(this);
        }
        if(node.getE2() != null)
        {
            node.getE2().apply(this);
        }
        if(node.getE3() != null)
        {
            node.getE3().apply(this);
        }
        outATernaireInstTernaire(node);
    }

    public void inAListExpCallFunction(AListExpCallFunction node)
    {
        defaultIn(node);
    }

    public void outAListExpCallFunction(AListExpCallFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListExpCallFunction(AListExpCallFunction node)
    {
        inAListExpCallFunction(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getParOuv() != null)
        {
            node.getParOuv().apply(this);
        }
        if(node.getListExp() != null)
        {
            node.getListExp().apply(this);
        }
        if(node.getParFer() != null)
        {
            node.getParFer().apply(this);
        }
        outAListExpCallFunction(node);
    }

    public void inAEpsilonListExp(AEpsilonListExp node)
    {
        defaultIn(node);
    }

    public void outAEpsilonListExp(AEpsilonListExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEpsilonListExp(AEpsilonListExp node)
    {
        inAEpsilonListExp(node);
        outAEpsilonListExp(node);
    }

    public void inAListExpressionsListExp(AListExpressionsListExp node)
    {
        defaultIn(node);
    }

    public void outAListExpressionsListExp(AListExpressionsListExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListExpressionsListExp(AListExpressionsListExp node)
    {
        inAListExpressionsListExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getListExp2() != null)
        {
            node.getListExp2().apply(this);
        }
        outAListExpressionsListExp(node);
    }

    public void inAEpsilonListExp2(AEpsilonListExp2 node)
    {
        defaultIn(node);
    }

    public void outAEpsilonListExp2(AEpsilonListExp2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEpsilonListExp2(AEpsilonListExp2 node)
    {
        inAEpsilonListExp2(node);
        outAEpsilonListExp2(node);
    }

    public void inAListExpSeparatorListExp2(AListExpSeparatorListExp2 node)
    {
        defaultIn(node);
    }

    public void outAListExpSeparatorListExp2(AListExpSeparatorListExp2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListExpSeparatorListExp2(AListExpSeparatorListExp2 node)
    {
        inAListExpSeparatorListExp2(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getListExp2() != null)
        {
            node.getListExp2().apply(this);
        }
        outAListExpSeparatorListExp2(node);
    }

    public void inAAffectationInstAffectation(AAffectationInstAffectation node)
    {
        defaultIn(node);
    }

    public void outAAffectationInstAffectation(AAffectationInstAffectation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAffectationInstAffectation(AAffectationInstAffectation node)
    {
        inAAffectationInstAffectation(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getPointVir() != null)
        {
            node.getPointVir().apply(this);
        }
        outAAffectationInstAffectation(node);
    }

    public void inAAffectationTableauInstAffectation(AAffectationTableauInstAffectation node)
    {
        defaultIn(node);
    }

    public void outAAffectationTableauInstAffectation(AAffectationTableauInstAffectation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAffectationTableauInstAffectation(AAffectationTableauInstAffectation node)
    {
        inAAffectationTableauInstAffectation(node);
        if(node.getTableau() != null)
        {
            node.getTableau().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getPointVir() != null)
        {
            node.getPointVir().apply(this);
        }
        outAAffectationTableauInstAffectation(node);
    }

    public void inACallFunctionInstCallFunction(ACallFunctionInstCallFunction node)
    {
        defaultIn(node);
    }

    public void outACallFunctionInstCallFunction(ACallFunctionInstCallFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallFunctionInstCallFunction(ACallFunctionInstCallFunction node)
    {
        inACallFunctionInstCallFunction(node);
        if(node.getCallFunction() != null)
        {
            node.getCallFunction().apply(this);
        }
        if(node.getPointVir() != null)
        {
            node.getPointVir().apply(this);
        }
        outACallFunctionInstCallFunction(node);
    }

    public void inATantQueInstTantQue(ATantQueInstTantQue node)
    {
        defaultIn(node);
    }

    public void outATantQueInstTantQue(ATantQueInstTantQue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATantQueInstTantQue(ATantQueInstTantQue node)
    {
        inATantQueInstTantQue(node);
        if(node.getTantQue() != null)
        {
            node.getTantQue().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getFaire() != null)
        {
            node.getFaire().apply(this);
        }
        if(node.getInstBloc() != null)
        {
            node.getInstBloc().apply(this);
        }
        outATantQueInstTantQue(node);
    }

    public void inAReturnInstReturn(AReturnInstReturn node)
    {
        defaultIn(node);
    }

    public void outAReturnInstReturn(AReturnInstReturn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnInstReturn(AReturnInstReturn node)
    {
        inAReturnInstReturn(node);
        if(node.getRetour() != null)
        {
            node.getRetour().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getPointVir() != null)
        {
            node.getPointVir().apply(this);
        }
        outAReturnInstReturn(node);
    }

    public void inASiInstSi(ASiInstSi node)
    {
        defaultIn(node);
    }

    public void outASiInstSi(ASiInstSi node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASiInstSi(ASiInstSi node)
    {
        inASiInstSi(node);
        if(node.getSi() != null)
        {
            node.getSi().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAlors() != null)
        {
            node.getAlors().apply(this);
        }
        if(node.getInstBloc() != null)
        {
            node.getInstBloc().apply(this);
        }
        if(node.getInstSiSinon() != null)
        {
            node.getInstSiSinon().apply(this);
        }
        outASiInstSi(node);
    }

    public void inASinonInstSiSinon(ASinonInstSiSinon node)
    {
        defaultIn(node);
    }

    public void outASinonInstSiSinon(ASinonInstSiSinon node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASinonInstSiSinon(ASinonInstSiSinon node)
    {
        inASinonInstSiSinon(node);
        if(node.getSinon() != null)
        {
            node.getSinon().apply(this);
        }
        if(node.getInstBloc() != null)
        {
            node.getInstBloc().apply(this);
        }
        outASinonInstSiSinon(node);
    }

    public void inAEpsilonInstSiSinon(AEpsilonInstSiSinon node)
    {
        defaultIn(node);
    }

    public void outAEpsilonInstSiSinon(AEpsilonInstSiSinon node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEpsilonInstSiSinon(AEpsilonInstSiSinon node)
    {
        inAEpsilonInstSiSinon(node);
        outAEpsilonInstSiSinon(node);
    }

    public void inAWriteInstWrite(AWriteInstWrite node)
    {
        defaultIn(node);
    }

    public void outAWriteInstWrite(AWriteInstWrite node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWriteInstWrite(AWriteInstWrite node)
    {
        inAWriteInstWrite(node);
        if(node.getEcrire() != null)
        {
            node.getEcrire().apply(this);
        }
        if(node.getParOuv() != null)
        {
            node.getParOuv().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParFer() != null)
        {
            node.getParFer().apply(this);
        }
        if(node.getPointVir() != null)
        {
            node.getPointVir().apply(this);
        }
        outAWriteInstWrite(node);
    }

    public void inAInstAffectationInstruction(AInstAffectationInstruction node)
    {
        defaultIn(node);
    }

    public void outAInstAffectationInstruction(AInstAffectationInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstAffectationInstruction(AInstAffectationInstruction node)
    {
        inAInstAffectationInstruction(node);
        if(node.getInstAffectation() != null)
        {
            node.getInstAffectation().apply(this);
        }
        outAInstAffectationInstruction(node);
    }

    public void inAInstCallFunctionInstruction(AInstCallFunctionInstruction node)
    {
        defaultIn(node);
    }

    public void outAInstCallFunctionInstruction(AInstCallFunctionInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstCallFunctionInstruction(AInstCallFunctionInstruction node)
    {
        inAInstCallFunctionInstruction(node);
        if(node.getInstCallFunction() != null)
        {
            node.getInstCallFunction().apply(this);
        }
        outAInstCallFunctionInstruction(node);
    }

    public void inAInstTantQueInstruction(AInstTantQueInstruction node)
    {
        defaultIn(node);
    }

    public void outAInstTantQueInstruction(AInstTantQueInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstTantQueInstruction(AInstTantQueInstruction node)
    {
        inAInstTantQueInstruction(node);
        if(node.getInstTantQue() != null)
        {
            node.getInstTantQue().apply(this);
        }
        outAInstTantQueInstruction(node);
    }

    public void inAInstReturnInstruction(AInstReturnInstruction node)
    {
        defaultIn(node);
    }

    public void outAInstReturnInstruction(AInstReturnInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstReturnInstruction(AInstReturnInstruction node)
    {
        inAInstReturnInstruction(node);
        if(node.getInstReturn() != null)
        {
            node.getInstReturn().apply(this);
        }
        outAInstReturnInstruction(node);
    }

    public void inAInstSiInstruction(AInstSiInstruction node)
    {
        defaultIn(node);
    }

    public void outAInstSiInstruction(AInstSiInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstSiInstruction(AInstSiInstruction node)
    {
        inAInstSiInstruction(node);
        if(node.getInstSi() != null)
        {
            node.getInstSi().apply(this);
        }
        outAInstSiInstruction(node);
    }

    public void inAInstWriteInstruction(AInstWriteInstruction node)
    {
        defaultIn(node);
    }

    public void outAInstWriteInstruction(AInstWriteInstruction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstWriteInstruction(AInstWriteInstruction node)
    {
        inAInstWriteInstruction(node);
        if(node.getInstWrite() != null)
        {
            node.getInstWrite().apply(this);
        }
        outAInstWriteInstruction(node);
    }

    public void inAListInstructionsInstBloc(AListInstructionsInstBloc node)
    {
        defaultIn(node);
    }

    public void outAListInstructionsInstBloc(AListInstructionsInstBloc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListInstructionsInstBloc(AListInstructionsInstBloc node)
    {
        inAListInstructionsInstBloc(node);
        if(node.getAccOuv() != null)
        {
            node.getAccOuv().apply(this);
        }
        if(node.getListInst() != null)
        {
            node.getListInst().apply(this);
        }
        if(node.getAccFer() != null)
        {
            node.getAccFer().apply(this);
        }
        outAListInstructionsInstBloc(node);
    }

    public void inAInstructionListListInst(AInstructionListListInst node)
    {
        defaultIn(node);
    }

    public void outAInstructionListListInst(AInstructionListListInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstructionListListInst(AInstructionListListInst node)
    {
        inAInstructionListListInst(node);
        if(node.getInstruction() != null)
        {
            node.getInstruction().apply(this);
        }
        if(node.getListInst() != null)
        {
            node.getListInst().apply(this);
        }
        outAInstructionListListInst(node);
    }

    public void inAEpsilonListInst(AEpsilonListInst node)
    {
        defaultIn(node);
    }

    public void outAEpsilonListInst(AEpsilonListInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEpsilonListInst(AEpsilonListInst node)
    {
        inAEpsilonListInst(node);
        outAEpsilonListInst(node);
    }

    public void inATypeDecVariable(ATypeDecVariable node)
    {
        defaultIn(node);
    }

    public void outATypeDecVariable(ATypeDecVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypeDecVariable(ATypeDecVariable node)
    {
        inATypeDecVariable(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outATypeDecVariable(node);
    }

    public void inATableauDecVariable(ATableauDecVariable node)
    {
        defaultIn(node);
    }

    public void outATableauDecVariable(ATableauDecVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATableauDecVariable(ATableauDecVariable node)
    {
        inATableauDecVariable(node);
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getCrochetOuv() != null)
        {
            node.getCrochetOuv().apply(this);
        }
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        if(node.getCrochetFer() != null)
        {
            node.getCrochetFer().apply(this);
        }
        outATableauDecVariable(node);
    }

    public void inAArrayInstTableau(AArrayInstTableau node)
    {
        defaultIn(node);
    }

    public void outAArrayInstTableau(AArrayInstTableau node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayInstTableau(AArrayInstTableau node)
    {
        inAArrayInstTableau(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getCrochetOuv() != null)
        {
            node.getCrochetOuv().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getCrochetFer() != null)
        {
            node.getCrochetFer().apply(this);
        }
        outAArrayInstTableau(node);
    }

    public void inAEntierType(AEntierType node)
    {
        defaultIn(node);
    }

    public void outAEntierType(AEntierType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEntierType(AEntierType node)
    {
        inAEntierType(node);
        if(node.getEntier() != null)
        {
            node.getEntier().apply(this);
        }
        outAEntierType(node);
    }

    public void inAListDecVariable2ListDecVariable(AListDecVariable2ListDecVariable node)
    {
        defaultIn(node);
    }

    public void outAListDecVariable2ListDecVariable(AListDecVariable2ListDecVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListDecVariable2ListDecVariable(AListDecVariable2ListDecVariable node)
    {
        inAListDecVariable2ListDecVariable(node);
        if(node.getDecVariable() != null)
        {
            node.getDecVariable().apply(this);
        }
        if(node.getListDecVariable2() != null)
        {
            node.getListDecVariable2().apply(this);
        }
        outAListDecVariable2ListDecVariable(node);
    }

    public void inAEpsilonListDecVariable(AEpsilonListDecVariable node)
    {
        defaultIn(node);
    }

    public void outAEpsilonListDecVariable(AEpsilonListDecVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEpsilonListDecVariable(AEpsilonListDecVariable node)
    {
        inAEpsilonListDecVariable(node);
        outAEpsilonListDecVariable(node);
    }

    public void inADecVariableListDecVariable2(ADecVariableListDecVariable2 node)
    {
        defaultIn(node);
    }

    public void outADecVariableListDecVariable2(ADecVariableListDecVariable2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecVariableListDecVariable2(ADecVariableListDecVariable2 node)
    {
        inADecVariableListDecVariable2(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getDecVariable() != null)
        {
            node.getDecVariable().apply(this);
        }
        if(node.getListDecVariable2() != null)
        {
            node.getListDecVariable2().apply(this);
        }
        outADecVariableListDecVariable2(node);
    }

    public void inAEpsilonListDecVariable2(AEpsilonListDecVariable2 node)
    {
        defaultIn(node);
    }

    public void outAEpsilonListDecVariable2(AEpsilonListDecVariable2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEpsilonListDecVariable2(AEpsilonListDecVariable2 node)
    {
        inAEpsilonListDecVariable2(node);
        outAEpsilonListDecVariable2(node);
    }

    public void inADecVarListDecVariableOpt(ADecVarListDecVariableOpt node)
    {
        defaultIn(node);
    }

    public void outADecVarListDecVariableOpt(ADecVarListDecVariableOpt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecVarListDecVariableOpt(ADecVarListDecVariableOpt node)
    {
        inADecVarListDecVariableOpt(node);
        if(node.getDecVariable() != null)
        {
            node.getDecVariable().apply(this);
        }
        if(node.getListDecVariableOpt2() != null)
        {
            node.getListDecVariableOpt2().apply(this);
        }
        if(node.getPointVir() != null)
        {
            node.getPointVir().apply(this);
        }
        outADecVarListDecVariableOpt(node);
    }

    public void inAEpsilonListDecVariableOpt(AEpsilonListDecVariableOpt node)
    {
        defaultIn(node);
    }

    public void outAEpsilonListDecVariableOpt(AEpsilonListDecVariableOpt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEpsilonListDecVariableOpt(AEpsilonListDecVariableOpt node)
    {
        inAEpsilonListDecVariableOpt(node);
        outAEpsilonListDecVariableOpt(node);
    }

    public void inAList2ListDecVariableOpt2(AList2ListDecVariableOpt2 node)
    {
        defaultIn(node);
    }

    public void outAList2ListDecVariableOpt2(AList2ListDecVariableOpt2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAList2ListDecVariableOpt2(AList2ListDecVariableOpt2 node)
    {
        inAList2ListDecVariableOpt2(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getDecVariable() != null)
        {
            node.getDecVariable().apply(this);
        }
        if(node.getListDecVariableOpt2() != null)
        {
            node.getListDecVariableOpt2().apply(this);
        }
        outAList2ListDecVariableOpt2(node);
    }

    public void inAEpsilonListDecVariableOpt2(AEpsilonListDecVariableOpt2 node)
    {
        defaultIn(node);
    }

    public void outAEpsilonListDecVariableOpt2(AEpsilonListDecVariableOpt2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEpsilonListDecVariableOpt2(AEpsilonListDecVariableOpt2 node)
    {
        inAEpsilonListDecVariableOpt2(node);
        outAEpsilonListDecVariableOpt2(node);
    }

    public void inAListDecVariableOptDecFunction(AListDecVariableOptDecFunction node)
    {
        defaultIn(node);
    }

    public void outAListDecVariableOptDecFunction(AListDecVariableOptDecFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListDecVariableOptDecFunction(AListDecVariableOptDecFunction node)
    {
        inAListDecVariableOptDecFunction(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getParOuv() != null)
        {
            node.getParOuv().apply(this);
        }
        if(node.getListDecVariable() != null)
        {
            node.getListDecVariable().apply(this);
        }
        if(node.getParFer() != null)
        {
            node.getParFer().apply(this);
        }
        if(node.getListDecVariableOpt() != null)
        {
            node.getListDecVariableOpt().apply(this);
        }
        if(node.getInstBloc() != null)
        {
            node.getInstBloc().apply(this);
        }
        outAListDecVariableOptDecFunction(node);
    }

    public void inADecFunctionListDecFunction(ADecFunctionListDecFunction node)
    {
        defaultIn(node);
    }

    public void outADecFunctionListDecFunction(ADecFunctionListDecFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecFunctionListDecFunction(ADecFunctionListDecFunction node)
    {
        inADecFunctionListDecFunction(node);
        if(node.getDecFunction() != null)
        {
            node.getDecFunction().apply(this);
        }
        if(node.getListDecFunction() != null)
        {
            node.getListDecFunction().apply(this);
        }
        outADecFunctionListDecFunction(node);
    }

    public void inAEpsilonListDecFunction(AEpsilonListDecFunction node)
    {
        defaultIn(node);
    }

    public void outAEpsilonListDecFunction(AEpsilonListDecFunction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEpsilonListDecFunction(AEpsilonListDecFunction node)
    {
        inAEpsilonListDecFunction(node);
        outAEpsilonListDecFunction(node);
    }

    public void inAEtExp1(AEtExp1 node)
    {
        defaultIn(node);
    }

    public void outAEtExp1(AEtExp1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEtExp1(AEtExp1 node)
    {
        inAEtExp1(node);
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        if(node.getEt() != null)
        {
            node.getEt().apply(this);
        }
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        outAEtExp1(node);
    }

    public void inAExp2Exp1(AExp2Exp1 node)
    {
        defaultIn(node);
    }

    public void outAExp2Exp1(AExp2Exp1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp2Exp1(AExp2Exp1 node)
    {
        inAExp2Exp1(node);
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        outAExp2Exp1(node);
    }

    public void inAEqualExp2(AEqualExp2 node)
    {
        defaultIn(node);
    }

    public void outAEqualExp2(AEqualExp2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualExp2(AEqualExp2 node)
    {
        inAEqualExp2(node);
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getExp3() != null)
        {
            node.getExp3().apply(this);
        }
        outAEqualExp2(node);
    }

    public void inAInfExp2(AInfExp2 node)
    {
        defaultIn(node);
    }

    public void outAInfExp2(AInfExp2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInfExp2(AInfExp2 node)
    {
        inAInfExp2(node);
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        if(node.getInf() != null)
        {
            node.getInf().apply(this);
        }
        if(node.getExp3() != null)
        {
            node.getExp3().apply(this);
        }
        outAInfExp2(node);
    }

    public void inAExp3Exp2(AExp3Exp2 node)
    {
        defaultIn(node);
    }

    public void outAExp3Exp2(AExp3Exp2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp3Exp2(AExp3Exp2 node)
    {
        inAExp3Exp2(node);
        if(node.getExp3() != null)
        {
            node.getExp3().apply(this);
        }
        outAExp3Exp2(node);
    }

    public void inAPlusExp3(APlusExp3 node)
    {
        defaultIn(node);
    }

    public void outAPlusExp3(APlusExp3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusExp3(APlusExp3 node)
    {
        inAPlusExp3(node);
        if(node.getExp3() != null)
        {
            node.getExp3().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getExp4() != null)
        {
            node.getExp4().apply(this);
        }
        outAPlusExp3(node);
    }

    public void inAMinusExp3(AMinusExp3 node)
    {
        defaultIn(node);
    }

    public void outAMinusExp3(AMinusExp3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusExp3(AMinusExp3 node)
    {
        inAMinusExp3(node);
        if(node.getExp3() != null)
        {
            node.getExp3().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getExp4() != null)
        {
            node.getExp4().apply(this);
        }
        outAMinusExp3(node);
    }

    public void inAExp4Exp3(AExp4Exp3 node)
    {
        defaultIn(node);
    }

    public void outAExp4Exp3(AExp4Exp3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp4Exp3(AExp4Exp3 node)
    {
        inAExp4Exp3(node);
        if(node.getExp4() != null)
        {
            node.getExp4().apply(this);
        }
        outAExp4Exp3(node);
    }

    public void inAMultiplicationExp4(AMultiplicationExp4 node)
    {
        defaultIn(node);
    }

    public void outAMultiplicationExp4(AMultiplicationExp4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplicationExp4(AMultiplicationExp4 node)
    {
        inAMultiplicationExp4(node);
        if(node.getExp4() != null)
        {
            node.getExp4().apply(this);
        }
        if(node.getMultiply() != null)
        {
            node.getMultiply().apply(this);
        }
        if(node.getExp5() != null)
        {
            node.getExp5().apply(this);
        }
        outAMultiplicationExp4(node);
    }

    public void inADivExp4(ADivExp4 node)
    {
        defaultIn(node);
    }

    public void outADivExp4(ADivExp4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExp4(ADivExp4 node)
    {
        inADivExp4(node);
        if(node.getExp4() != null)
        {
            node.getExp4().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getExp5() != null)
        {
            node.getExp5().apply(this);
        }
        outADivExp4(node);
    }

    public void inAExp5Exp4(AExp5Exp4 node)
    {
        defaultIn(node);
    }

    public void outAExp5Exp4(AExp5Exp4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp5Exp4(AExp5Exp4 node)
    {
        inAExp5Exp4(node);
        if(node.getExp5() != null)
        {
            node.getExp5().apply(this);
        }
        outAExp5Exp4(node);
    }

    public void inANonExp5(ANonExp5 node)
    {
        defaultIn(node);
    }

    public void outANonExp5(ANonExp5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANonExp5(ANonExp5 node)
    {
        inANonExp5(node);
        if(node.getNon() != null)
        {
            node.getNon().apply(this);
        }
        if(node.getExp5() != null)
        {
            node.getExp5().apply(this);
        }
        outANonExp5(node);
    }

    public void inAExp6Exp5(AExp6Exp5 node)
    {
        defaultIn(node);
    }

    public void outAExp6Exp5(AExp6Exp5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp6Exp5(AExp6Exp5 node)
    {
        inAExp6Exp5(node);
        if(node.getExp6() != null)
        {
            node.getExp6().apply(this);
        }
        outAExp6Exp5(node);
    }

    public void inAExpExp6(AExpExp6 node)
    {
        defaultIn(node);
    }

    public void outAExpExp6(AExpExp6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpExp6(AExpExp6 node)
    {
        inAExpExp6(node);
        if(node.getParOuv() != null)
        {
            node.getParOuv().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParFer() != null)
        {
            node.getParFer().apply(this);
        }
        outAExpExp6(node);
    }

    public void inANumberExp6(ANumberExp6 node)
    {
        defaultIn(node);
    }

    public void outANumberExp6(ANumberExp6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberExp6(ANumberExp6 node)
    {
        inANumberExp6(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberExp6(node);
    }

    public void inAIdExp6(AIdExp6 node)
    {
        defaultIn(node);
    }

    public void outAIdExp6(AIdExp6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdExp6(AIdExp6 node)
    {
        inAIdExp6(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdExp6(node);
    }

    public void inATableauExp6(ATableauExp6 node)
    {
        defaultIn(node);
    }

    public void outATableauExp6(ATableauExp6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATableauExp6(ATableauExp6 node)
    {
        inATableauExp6(node);
        if(node.getTableau() != null)
        {
            node.getTableau().apply(this);
        }
        outATableauExp6(node);
    }

    public void inACallFunctionExp6(ACallFunctionExp6 node)
    {
        defaultIn(node);
    }

    public void outACallFunctionExp6(ACallFunctionExp6 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallFunctionExp6(ACallFunctionExp6 node)
    {
        inACallFunctionExp6(node);
        if(node.getCallFunction() != null)
        {
            node.getCallFunction().apply(this);
        }
        outACallFunctionExp6(node);
    }
}
