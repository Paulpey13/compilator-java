/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.analysis;

import java.util.*;
import sc.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListDecVariableOptProgramme(AListDecVariableOptProgramme node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOuExp(AOuExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExp1Exp(AExp1Exp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIncrementeInstIncremente(AIncrementeInstIncremente node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATernaireInstTernaire(ATernaireInstTernaire node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListExpCallFunction(AListExpCallFunction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsilonListExp(AEpsilonListExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListExpressionsListExp(AListExpressionsListExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsilonListExp2(AEpsilonListExp2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListExpSeparatorListExp2(AListExpSeparatorListExp2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAffectationInstAffectation(AAffectationInstAffectation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAffectationTableauInstAffectation(AAffectationTableauInstAffectation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACallFunctionInstCallFunction(ACallFunctionInstCallFunction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATantQueInstTantQue(ATantQueInstTantQue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAReturnInstReturn(AReturnInstReturn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASiInstSi(ASiInstSi node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASinonInstSiSinon(ASinonInstSiSinon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsilonInstSiSinon(AEpsilonInstSiSinon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWriteInstWrite(AWriteInstWrite node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstAffectationInstruction(AInstAffectationInstruction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstCallFunctionInstruction(AInstCallFunctionInstruction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstTantQueInstruction(AInstTantQueInstruction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstReturnInstruction(AInstReturnInstruction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstSiInstruction(AInstSiInstruction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstWriteInstruction(AInstWriteInstruction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListInstructionsInstBloc(AListInstructionsInstBloc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInstructionListListInst(AInstructionListListInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsilonListInst(AEpsilonListInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeDecVariable(ATypeDecVariable node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATableauDecVariable(ATableauDecVariable node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAArrayInstTableau(AArrayInstTableau node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEntierType(AEntierType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListDecVariable2ListDecVariable(AListDecVariable2ListDecVariable node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsilonListDecVariable(AEpsilonListDecVariable node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecVariableListDecVariable2(ADecVariableListDecVariable2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsilonListDecVariable2(AEpsilonListDecVariable2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecVarListDecVariableOpt(ADecVarListDecVariableOpt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsilonListDecVariableOpt(AEpsilonListDecVariableOpt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAList2ListDecVariableOpt2(AList2ListDecVariableOpt2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsilonListDecVariableOpt2(AEpsilonListDecVariableOpt2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListDecVariableOptDecFunction(AListDecVariableOptDecFunction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecFunctionListDecFunction(ADecFunctionListDecFunction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsilonListDecFunction(AEpsilonListDecFunction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEtExp1(AEtExp1 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExp2Exp1(AExp2Exp1 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqualExp2(AEqualExp2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInfExp2(AInfExp2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExp3Exp2(AExp3Exp2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusExp3(APlusExp3 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusExp3(AMinusExp3 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExp4Exp3(AExp4Exp3 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultiplicationExp4(AMultiplicationExp4 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivExp4(ADivExp4 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExp5Exp4(AExp5Exp4 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANonExp5(ANonExp5 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExp6Exp5(AExp6Exp5 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpExp6(AExpExp6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumberExp6(ANumberExp6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdExp6(AIdExp6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATableauExp6(ATableauExp6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACallFunctionExp6(ACallFunctionExp6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEt(TEt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOu(TOu node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInf(TInf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMultiply(TMultiply node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEqual(TEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNon(TNon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAccOuv(TAccOuv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAccFer(TAccFer node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCrochetOuv(TCrochetOuv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCrochetFer(TCrochetFer node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInterrogation(TInterrogation node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTParOuv(TParOuv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTParFer(TParFer node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPointVir(TPointVir node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlusEqual(TPlusEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFaire(TFaire node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTantQue(TTantQue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRetour(TRetour node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSi(TSi node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAlors(TAlors node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEcrire(TEcrire node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSinon(TSinon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEntier(TEntier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
