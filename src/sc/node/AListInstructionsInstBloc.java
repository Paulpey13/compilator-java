/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AListInstructionsInstBloc extends PInstBloc
{
    private TAccOuv _accOuv_;
    private PListInst _listInst_;
    private TAccFer _accFer_;

    public AListInstructionsInstBloc()
    {
        // Constructor
    }

    public AListInstructionsInstBloc(
        @SuppressWarnings("hiding") TAccOuv _accOuv_,
        @SuppressWarnings("hiding") PListInst _listInst_,
        @SuppressWarnings("hiding") TAccFer _accFer_)
    {
        // Constructor
        setAccOuv(_accOuv_);

        setListInst(_listInst_);

        setAccFer(_accFer_);

    }

    @Override
    public Object clone()
    {
        return new AListInstructionsInstBloc(
            cloneNode(this._accOuv_),
            cloneNode(this._listInst_),
            cloneNode(this._accFer_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAListInstructionsInstBloc(this);
    }

    public TAccOuv getAccOuv()
    {
        return this._accOuv_;
    }

    public void setAccOuv(TAccOuv node)
    {
        if(this._accOuv_ != null)
        {
            this._accOuv_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._accOuv_ = node;
    }

    public PListInst getListInst()
    {
        return this._listInst_;
    }

    public void setListInst(PListInst node)
    {
        if(this._listInst_ != null)
        {
            this._listInst_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._listInst_ = node;
    }

    public TAccFer getAccFer()
    {
        return this._accFer_;
    }

    public void setAccFer(TAccFer node)
    {
        if(this._accFer_ != null)
        {
            this._accFer_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._accFer_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._accOuv_)
            + toString(this._listInst_)
            + toString(this._accFer_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._accOuv_ == child)
        {
            this._accOuv_ = null;
            return;
        }

        if(this._listInst_ == child)
        {
            this._listInst_ = null;
            return;
        }

        if(this._accFer_ == child)
        {
            this._accFer_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._accOuv_ == oldChild)
        {
            setAccOuv((TAccOuv) newChild);
            return;
        }

        if(this._listInst_ == oldChild)
        {
            setListInst((PListInst) newChild);
            return;
        }

        if(this._accFer_ == oldChild)
        {
            setAccFer((TAccFer) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
