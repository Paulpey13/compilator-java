/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AArrayInstTableau extends PTableau
{
    private TId _id_;
    private TCrochetOuv _crochetOuv_;
    private PExp _exp_;
    private TCrochetFer _crochetFer_;

    public AArrayInstTableau()
    {
        // Constructor
    }

    public AArrayInstTableau(
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") TCrochetOuv _crochetOuv_,
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") TCrochetFer _crochetFer_)
    {
        // Constructor
        setId(_id_);

        setCrochetOuv(_crochetOuv_);

        setExp(_exp_);

        setCrochetFer(_crochetFer_);

    }

    @Override
    public Object clone()
    {
        return new AArrayInstTableau(
            cloneNode(this._id_),
            cloneNode(this._crochetOuv_),
            cloneNode(this._exp_),
            cloneNode(this._crochetFer_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArrayInstTableau(this);
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TCrochetOuv getCrochetOuv()
    {
        return this._crochetOuv_;
    }

    public void setCrochetOuv(TCrochetOuv node)
    {
        if(this._crochetOuv_ != null)
        {
            this._crochetOuv_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._crochetOuv_ = node;
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public TCrochetFer getCrochetFer()
    {
        return this._crochetFer_;
    }

    public void setCrochetFer(TCrochetFer node)
    {
        if(this._crochetFer_ != null)
        {
            this._crochetFer_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._crochetFer_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._id_)
            + toString(this._crochetOuv_)
            + toString(this._exp_)
            + toString(this._crochetFer_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._crochetOuv_ == child)
        {
            this._crochetOuv_ = null;
            return;
        }

        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._crochetFer_ == child)
        {
            this._crochetFer_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._crochetOuv_ == oldChild)
        {
            setCrochetOuv((TCrochetOuv) newChild);
            return;
        }

        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._crochetFer_ == oldChild)
        {
            setCrochetFer((TCrochetFer) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
