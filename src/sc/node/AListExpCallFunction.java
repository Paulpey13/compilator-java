/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AListExpCallFunction extends PCallFunction
{
    private TId _id_;
    private TParOuv _parOuv_;
    private PListExp _listExp_;
    private TParFer _parFer_;

    public AListExpCallFunction()
    {
        // Constructor
    }

    public AListExpCallFunction(
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") TParOuv _parOuv_,
        @SuppressWarnings("hiding") PListExp _listExp_,
        @SuppressWarnings("hiding") TParFer _parFer_)
    {
        // Constructor
        setId(_id_);

        setParOuv(_parOuv_);

        setListExp(_listExp_);

        setParFer(_parFer_);

    }

    @Override
    public Object clone()
    {
        return new AListExpCallFunction(
            cloneNode(this._id_),
            cloneNode(this._parOuv_),
            cloneNode(this._listExp_),
            cloneNode(this._parFer_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAListExpCallFunction(this);
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TParOuv getParOuv()
    {
        return this._parOuv_;
    }

    public void setParOuv(TParOuv node)
    {
        if(this._parOuv_ != null)
        {
            this._parOuv_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parOuv_ = node;
    }

    public PListExp getListExp()
    {
        return this._listExp_;
    }

    public void setListExp(PListExp node)
    {
        if(this._listExp_ != null)
        {
            this._listExp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._listExp_ = node;
    }

    public TParFer getParFer()
    {
        return this._parFer_;
    }

    public void setParFer(TParFer node)
    {
        if(this._parFer_ != null)
        {
            this._parFer_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parFer_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._id_)
            + toString(this._parOuv_)
            + toString(this._listExp_)
            + toString(this._parFer_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._parOuv_ == child)
        {
            this._parOuv_ = null;
            return;
        }

        if(this._listExp_ == child)
        {
            this._listExp_ = null;
            return;
        }

        if(this._parFer_ == child)
        {
            this._parFer_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._parOuv_ == oldChild)
        {
            setParOuv((TParOuv) newChild);
            return;
        }

        if(this._listExp_ == oldChild)
        {
            setListExp((PListExp) newChild);
            return;
        }

        if(this._parFer_ == oldChild)
        {
            setParFer((TParFer) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
