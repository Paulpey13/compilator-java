/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AWriteInstWrite extends PInstWrite
{
    private TEcrire _ecrire_;
    private TParOuv _parOuv_;
    private PExp _exp_;
    private TParFer _parFer_;
    private TPointVir _pointVir_;

    public AWriteInstWrite()
    {
        // Constructor
    }

    public AWriteInstWrite(
        @SuppressWarnings("hiding") TEcrire _ecrire_,
        @SuppressWarnings("hiding") TParOuv _parOuv_,
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") TParFer _parFer_,
        @SuppressWarnings("hiding") TPointVir _pointVir_)
    {
        // Constructor
        setEcrire(_ecrire_);

        setParOuv(_parOuv_);

        setExp(_exp_);

        setParFer(_parFer_);

        setPointVir(_pointVir_);

    }

    @Override
    public Object clone()
    {
        return new AWriteInstWrite(
            cloneNode(this._ecrire_),
            cloneNode(this._parOuv_),
            cloneNode(this._exp_),
            cloneNode(this._parFer_),
            cloneNode(this._pointVir_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAWriteInstWrite(this);
    }

    public TEcrire getEcrire()
    {
        return this._ecrire_;
    }

    public void setEcrire(TEcrire node)
    {
        if(this._ecrire_ != null)
        {
            this._ecrire_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ecrire_ = node;
    }

    public TParOuv getParOuv()
    {
        return this._parOuv_;
    }

    public void setParOuv(TParOuv node)
    {
        if(this._parOuv_ != null)
        {
            this._parOuv_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parOuv_ = node;
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public TParFer getParFer()
    {
        return this._parFer_;
    }

    public void setParFer(TParFer node)
    {
        if(this._parFer_ != null)
        {
            this._parFer_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parFer_ = node;
    }

    public TPointVir getPointVir()
    {
        return this._pointVir_;
    }

    public void setPointVir(TPointVir node)
    {
        if(this._pointVir_ != null)
        {
            this._pointVir_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pointVir_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._ecrire_)
            + toString(this._parOuv_)
            + toString(this._exp_)
            + toString(this._parFer_)
            + toString(this._pointVir_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._ecrire_ == child)
        {
            this._ecrire_ = null;
            return;
        }

        if(this._parOuv_ == child)
        {
            this._parOuv_ = null;
            return;
        }

        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._parFer_ == child)
        {
            this._parFer_ = null;
            return;
        }

        if(this._pointVir_ == child)
        {
            this._pointVir_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._ecrire_ == oldChild)
        {
            setEcrire((TEcrire) newChild);
            return;
        }

        if(this._parOuv_ == oldChild)
        {
            setParOuv((TParOuv) newChild);
            return;
        }

        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._parFer_ == oldChild)
        {
            setParFer((TParFer) newChild);
            return;
        }

        if(this._pointVir_ == oldChild)
        {
            setPointVir((TPointVir) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
