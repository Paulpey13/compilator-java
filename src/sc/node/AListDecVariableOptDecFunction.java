/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AListDecVariableOptDecFunction extends PDecFunction
{
    private TId _id_;
    private TParOuv _parOuv_;
    private PListDecVariable _listDecVariable_;
    private TParFer _parFer_;
    private PListDecVariableOpt _listDecVariableOpt_;
    private PInstBloc _instBloc_;

    public AListDecVariableOptDecFunction()
    {
        // Constructor
    }

    public AListDecVariableOptDecFunction(
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") TParOuv _parOuv_,
        @SuppressWarnings("hiding") PListDecVariable _listDecVariable_,
        @SuppressWarnings("hiding") TParFer _parFer_,
        @SuppressWarnings("hiding") PListDecVariableOpt _listDecVariableOpt_,
        @SuppressWarnings("hiding") PInstBloc _instBloc_)
    {
        // Constructor
        setId(_id_);

        setParOuv(_parOuv_);

        setListDecVariable(_listDecVariable_);

        setParFer(_parFer_);

        setListDecVariableOpt(_listDecVariableOpt_);

        setInstBloc(_instBloc_);

    }

    @Override
    public Object clone()
    {
        return new AListDecVariableOptDecFunction(
            cloneNode(this._id_),
            cloneNode(this._parOuv_),
            cloneNode(this._listDecVariable_),
            cloneNode(this._parFer_),
            cloneNode(this._listDecVariableOpt_),
            cloneNode(this._instBloc_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAListDecVariableOptDecFunction(this);
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TParOuv getParOuv()
    {
        return this._parOuv_;
    }

    public void setParOuv(TParOuv node)
    {
        if(this._parOuv_ != null)
        {
            this._parOuv_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parOuv_ = node;
    }

    public PListDecVariable getListDecVariable()
    {
        return this._listDecVariable_;
    }

    public void setListDecVariable(PListDecVariable node)
    {
        if(this._listDecVariable_ != null)
        {
            this._listDecVariable_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._listDecVariable_ = node;
    }

    public TParFer getParFer()
    {
        return this._parFer_;
    }

    public void setParFer(TParFer node)
    {
        if(this._parFer_ != null)
        {
            this._parFer_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parFer_ = node;
    }

    public PListDecVariableOpt getListDecVariableOpt()
    {
        return this._listDecVariableOpt_;
    }

    public void setListDecVariableOpt(PListDecVariableOpt node)
    {
        if(this._listDecVariableOpt_ != null)
        {
            this._listDecVariableOpt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._listDecVariableOpt_ = node;
    }

    public PInstBloc getInstBloc()
    {
        return this._instBloc_;
    }

    public void setInstBloc(PInstBloc node)
    {
        if(this._instBloc_ != null)
        {
            this._instBloc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._instBloc_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._id_)
            + toString(this._parOuv_)
            + toString(this._listDecVariable_)
            + toString(this._parFer_)
            + toString(this._listDecVariableOpt_)
            + toString(this._instBloc_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._parOuv_ == child)
        {
            this._parOuv_ = null;
            return;
        }

        if(this._listDecVariable_ == child)
        {
            this._listDecVariable_ = null;
            return;
        }

        if(this._parFer_ == child)
        {
            this._parFer_ = null;
            return;
        }

        if(this._listDecVariableOpt_ == child)
        {
            this._listDecVariableOpt_ = null;
            return;
        }

        if(this._instBloc_ == child)
        {
            this._instBloc_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._parOuv_ == oldChild)
        {
            setParOuv((TParOuv) newChild);
            return;
        }

        if(this._listDecVariable_ == oldChild)
        {
            setListDecVariable((PListDecVariable) newChild);
            return;
        }

        if(this._parFer_ == oldChild)
        {
            setParFer((TParFer) newChild);
            return;
        }

        if(this._listDecVariableOpt_ == oldChild)
        {
            setListDecVariableOpt((PListDecVariableOpt) newChild);
            return;
        }

        if(this._instBloc_ == oldChild)
        {
            setInstBloc((PInstBloc) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
