/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class ACallFunctionInstCallFunction extends PInstCallFunction
{
    private PCallFunction _callFunction_;
    private TPointVir _pointVir_;

    public ACallFunctionInstCallFunction()
    {
        // Constructor
    }

    public ACallFunctionInstCallFunction(
        @SuppressWarnings("hiding") PCallFunction _callFunction_,
        @SuppressWarnings("hiding") TPointVir _pointVir_)
    {
        // Constructor
        setCallFunction(_callFunction_);

        setPointVir(_pointVir_);

    }

    @Override
    public Object clone()
    {
        return new ACallFunctionInstCallFunction(
            cloneNode(this._callFunction_),
            cloneNode(this._pointVir_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACallFunctionInstCallFunction(this);
    }

    public PCallFunction getCallFunction()
    {
        return this._callFunction_;
    }

    public void setCallFunction(PCallFunction node)
    {
        if(this._callFunction_ != null)
        {
            this._callFunction_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._callFunction_ = node;
    }

    public TPointVir getPointVir()
    {
        return this._pointVir_;
    }

    public void setPointVir(TPointVir node)
    {
        if(this._pointVir_ != null)
        {
            this._pointVir_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pointVir_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._callFunction_)
            + toString(this._pointVir_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._callFunction_ == child)
        {
            this._callFunction_ = null;
            return;
        }

        if(this._pointVir_ == child)
        {
            this._pointVir_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._callFunction_ == oldChild)
        {
            setCallFunction((PCallFunction) newChild);
            return;
        }

        if(this._pointVir_ == oldChild)
        {
            setPointVir((TPointVir) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
