/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AListExpressionsListExp extends PListExp
{
    private PExp _exp_;
    private PListExp2 _listExp2_;

    public AListExpressionsListExp()
    {
        // Constructor
    }

    public AListExpressionsListExp(
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") PListExp2 _listExp2_)
    {
        // Constructor
        setExp(_exp_);

        setListExp2(_listExp2_);

    }

    @Override
    public Object clone()
    {
        return new AListExpressionsListExp(
            cloneNode(this._exp_),
            cloneNode(this._listExp2_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAListExpressionsListExp(this);
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public PListExp2 getListExp2()
    {
        return this._listExp2_;
    }

    public void setListExp2(PListExp2 node)
    {
        if(this._listExp2_ != null)
        {
            this._listExp2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._listExp2_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._exp_)
            + toString(this._listExp2_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._listExp2_ == child)
        {
            this._listExp2_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._listExp2_ == oldChild)
        {
            setListExp2((PListExp2) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
